{
  "name": "docker-remote-api",
  "description": "Basic http wrapper to call the docker remote api from node",
  "version": "4.4.1",
  "main": "index.js",
  "dependencies": {
    "concat-stream": "^1.4.6",
    "docker-host": "^3.0.0",
    "once": "^1.3.0",
    "xtend": "^3.0.0"
  },
  "devDependencies": {
    "tape": "^2.13.3"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/docker-remote-api"
  },
  "keywords": [
    "docker",
    "remote",
    "api",
    "http",
    "https",
    "request"
  ],
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/docker-remote-api/issues"
  },
  "homepage": "https://github.com/mafintosh/docker-remote-api",
  "readme": "# docker-remote-api\n\nBasic http wrapper to call the docker remote api from node\n\n```\nnpm install docker-remote-api\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/docker-remote-api.svg?style=flat)](http://travis-ci.org/mafintosh/docker-remote-api)\n\n## Usage\n\n``` js\nvar docker = require('docker-remote-api')\nvar request = docker({\n  host: '/var/run/docker.sock'\n})\n\nrequest.get('/images/json', {json:true}, function(err, images) {\n  if (err) throw err\n  console.log('images', images)\n})\n\nrequest.get('/images/json', function(err, stream) {\n  if (err) throw err\n  // stream is a raw response stream\n})\n```\n\n## API\n\n#### `request = docker(options)`\n\n`options.host` should be an address to a docker instance i.e. `/var/run/docker.sock` or `127.0.0.1:2375`.\nAll other options will be used as default values for `get`, `post`, `put`, `delete`.\n\nIf you omit the `options.host` it will be set to `$DOCKER_HOST` or `/var/run/docker.sock`\n\n#### `request.get(path, [options], cb)`\n\nSend a `GET` request to the remote api. `path` should be the request path i.e. `/images/json`.\n`options` can contain the following\n\n``` js\n{\n  qs: {foo:'bar'},        // set querystring parameters\n  headers: {name: '...'}, // set request headers\n  json: true,             // return json instead of a stream\n  buffer: true,           // return a buffer instead of a stream\n  drain: true,            // will drain the response stream before calling cb\n  timeout: 20000,         // set request timeout\n  version: 'v1.14'        // set explicit api version\n}\n```\n\n#### `request.delete(path, [options], cb)`\n\nSend a `DELETE` request. Similar options as `request.get`\n\n#### `post = request.post(path, [options], cb)`\n\nSend a `POST` request. Similar options as `request.get` except it returns a request stream\nthat you can pipe a request body to. If you are sending json you can set `options.json = body`\nand `body` will be stringified and sent as the request body.\n\nIf you do not have a request body set `body: null` or remember to call `post.end()`\n\n#### `put = request.put(path, [options], cb)`\n\nSend a `PUT` request. Similar options as `request.put`\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "docker-remote-api@4.4.1",
  "_from": "docker-remote-api@^4.4.0"
}
