{
  "name": "docker-run",
  "version": "2.0.0",
  "description": "Start a docker image and attach to it",
  "main": "index.js",
  "dependencies": {
    "debug": "^1.0.2",
    "docker-raw-stream": "^1.3.0",
    "docker-remote-api": "^4.4.0",
    "pump": "^1.0.0",
    "through2": "^0.6.2",
    "minimist": "^1.1.0"
  },
  "devDependencies": {
    "concat-stream": "^1.4.6",
    "tape": "^3.0.0"
  },
  "bin": {
    "docker-run": "./bin.js"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mafintosh/docker-run"
  },
  "keywords": [
    "docker",
    "run"
  ],
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/docker-run/issues"
  },
  "homepage": "https://github.com/mafintosh/docker-run",
  "readme": "# docker-run\n\nStart a docker image and attach to it\n\n```\nnpm install docker-run\n```\n\n[There is also a command line tool available](https://github.com/mafintosh/docker-run#command-line-usage)\n\n## Usage\n\n``` js\nvar run = require('docker-run')\n\nvar child = run('mafintosh/dev', {tty:true})\n\nprocess.stdin.setRawMode(true)\nprocess.stdin.pipe(child.stdin)\nchild.stdout.pipe(process.stdout)\nchild.stderr.pipe(process.stderr)\n```\n\n## API\n\n* `child = run(image, [options])`\n\nWhere options can be\n\n``` js\n{\n  net: 'bridge',    // network mode (auto | host | bridge). defaults to bridge\n  tty: true,        // be a tty. defaults to false\n  fork: true,       // fork (do not attach stdio). defaults to false\n  remove: true,     // remove the container on stop. defaults to true\n  dns: ['8.8.8.8'], // set custom dns servers\n  ports: {\n    8080: 8081      // expose container 8080 to host 8081\n  },\n  volumes: {\n    '/root': '/tmp' // expose container /root to host /tmp\n  },\n  env: {\n    FOO: 'bar'      // set env vars\n  },\n  entrypoint: '/bin/bash' // override entrypoint on container\n}\n```\n\n* `child.stdin`, `child.stderr`, `child.stdout`\n\nThe stdio streams for the container. Is `null` if `fork: true`\n\n* `child.destroy()`\n\nDestroy the child container\n\n* `child.resize(wid, hei)`\n\nResize the container pty (if `tty: true`)\n\n## Events\n\n* `child.on('exit', exitCode)`\n\nEmitted when the container exits\n\n* `child.on('spawn', containerId)`\n\nEmitted when the container is spawned\n\n* `child.on('error', error)`\n\nEmitted if the container experiences a fatal error\n\n## Command line usage\n\nTo install the command line tool do\n\n```\nnpm install -g docker-run\n```\n\nAnd then run\n\n```\ndocker-run --help\n```\n\nTo view the help. In general to run an image do\n\n```\ndocker-run [image]\n```\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "docker-run@2.0.0",
  "dist": {
    "shasum": "c616c47b318809fc39fd8b4fd6114c2ccac056a3"
  },
  "_from": "git://github.com/royzhao/docker-run#4.0.0",
  "_resolved": "git://github.com/royzhao/docker-run#71dbb36195517d841114f6695e0146fa5c46e58a",
  "_fromGithub": true
}
